// This file is @generated by prost-build.
// MEXC WebSocket V3 API Protobuf Definitions

use prost::Message;
use crate::common::ts::{MarketData, BookTickerData, TransactionTime, PushTime};
use crate::common::Exchange;
use ta::{Close, High, Low, Open, Volume};

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicDealsV3Api {
    #[prost(message, repeated, tag = "1")]
    pub deals: ::prost::alloc::vec::Vec<PublicDealsV3ApiItem>,
    #[prost(string, tag = "2")]
    pub event_type: ::prost::alloc::string::String,
}

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicDealsV3ApiItem {
    #[prost(string, tag = "1")]
    pub price: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub quantity: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub trade_type: i32,
    #[prost(int64, tag = "4")]
    pub time: i64,
}

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicIncreaseDepthsV3Api {
    #[prost(message, repeated, tag = "1")]
    pub asks: ::prost::alloc::vec::Vec<PublicIncreaseDepthV3ApiItem>,
    #[prost(message, repeated, tag = "2")]
    pub bids: ::prost::alloc::vec::Vec<PublicIncreaseDepthV3ApiItem>,
    #[prost(string, tag = "3")]
    pub event_type: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub version: ::prost::alloc::string::String,
}

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicIncreaseDepthV3ApiItem {
    #[prost(string, tag = "1")]
    pub price: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub quantity: ::prost::alloc::string::String,
}

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicLimitDepthsV3Api {
    #[prost(message, repeated, tag = "1")]
    pub asks: ::prost::alloc::vec::Vec<PublicLimitDepthV3ApiItem>,
    #[prost(message, repeated, tag = "2")]
    pub bids: ::prost::alloc::vec::Vec<PublicLimitDepthV3ApiItem>,
    #[prost(string, tag = "3")]
    pub event_type: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub version: ::prost::alloc::string::String,
}

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicLimitDepthV3ApiItem {
    #[prost(string, tag = "1")]
    pub price: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub quantity: ::prost::alloc::string::String,
}

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrivateOrdersV3Api {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub client_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub price: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub quantity: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub amount: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub avg_price: ::prost::alloc::string::String,
    #[prost(int32, tag = "7")]
    pub order_type: i32,
    #[prost(int32, tag = "8")]
    pub trade_type: i32,
    #[prost(bool, tag = "9")]
    pub is_maker: bool,
    #[prost(string, tag = "10")]
    pub remain_amount: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub remain_quantity: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "12")]
    pub last_deal_quantity: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "13")]
    pub cumulative_quantity: ::prost::alloc::string::String,
    #[prost(string, tag = "14")]
    pub cumulative_amount: ::prost::alloc::string::String,
    #[prost(int32, tag = "15")]
    pub status: i32,
    #[prost(int64, tag = "16")]
    pub create_time: i64,
    #[prost(string, optional, tag = "17")]
    pub market: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "18")]
    pub trigger_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "19")]
    pub trigger_price: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "20")]
    pub state: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "21")]
    pub oco_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "22")]
    pub route_factor: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "23")]
    pub symbol_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "24")]
    pub market_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "25")]
    pub market_currency_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "26")]
    pub currency_id: ::core::option::Option<::prost::alloc::string::String>,
}

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicBookTickerV3Api {
    #[prost(string, tag = "1")]
    pub bid_price: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub bid_quantity: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub ask_price: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub ask_quantity: ::prost::alloc::string::String,
}

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrivateDealsV3Api {
    #[prost(string, tag = "1")]
    pub price: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub quantity: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub amount: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub trade_type: i32,
    #[prost(bool, tag = "5")]
    pub is_maker: bool,
    #[prost(bool, tag = "6")]
    pub is_self_trade: bool,
    #[prost(string, tag = "7")]
    pub trade_id: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub client_order_id: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub fee_amount: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub fee_currency: ::prost::alloc::string::String,
    #[prost(int64, tag = "12")]
    pub time: i64,
}

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrivateAccountV3Api {
    #[prost(string, tag = "1")]
    pub vcoin_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub coin_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub balance_amount: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub balance_amount_change: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub frozen_amount: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub frozen_amount_change: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(int64, tag = "8")]
    pub time: i64,
}

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicSpotKlineV3Api {
    /// K线周期(Min1,Min5,Min15,Min30,Min60,Hour4,Hour8,Day1,Week1,Month1)
    #[prost(string, tag = "1")]
    pub interval: ::prost::alloc::string::String,
    /// 窗口开始时间戳(秒时间戳)
    #[prost(int64, tag = "2")]
    pub window_start: i64,
    /// 开盘价
    #[prost(string, tag = "3")]
    pub opening_price: ::prost::alloc::string::String,
    /// 收盘价
    #[prost(string, tag = "4")]
    pub closing_price: ::prost::alloc::string::String,
    /// 最高价
    #[prost(string, tag = "5")]
    pub highest_price: ::prost::alloc::string::String,
    /// 最低价
    #[prost(string, tag = "6")]
    pub lowest_price: ::prost::alloc::string::String,
    /// 成交量
    #[prost(string, tag = "7")]
    pub volume: ::prost::alloc::string::String,
    /// 成交额
    #[prost(string, tag = "8")]
    pub amount: ::prost::alloc::string::String,
    /// 窗口结束时间戳(秒时间戳)
    #[prost(int64, tag = "9")]
    pub window_end: i64,
}

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicMiniTickerV3Api {
    /// 交易对名
    #[prost(string, tag = "1")]
    pub symbol: ::prost::alloc::string::String,
    /// 最新价格
    #[prost(string, tag = "2")]
    pub price: ::prost::alloc::string::String,
    /// utc+8时区涨跌幅
    #[prost(string, tag = "3")]
    pub rate: ::prost::alloc::string::String,
    /// 时区涨跌幅
    #[prost(string, tag = "4")]
    pub zoned_rate: ::prost::alloc::string::String,
    /// 滚动最高价
    #[prost(string, tag = "5")]
    pub high: ::prost::alloc::string::String,
    /// 滚动最低价
    #[prost(string, tag = "6")]
    pub low: ::prost::alloc::string::String,
    /// 滚动成交额
    #[prost(string, tag = "7")]
    pub volume: ::prost::alloc::string::String,
    /// 滚动成交量
    #[prost(string, tag = "8")]
    pub quantity: ::prost::alloc::string::String,
    /// utc+8时区上期收盘价模式涨跌幅
    #[prost(string, tag = "9")]
    pub last_close_rate: ::prost::alloc::string::String,
    /// 上期收盘价模式时区涨跌幅
    #[prost(string, tag = "10")]
    pub last_close_zoned_rate: ::prost::alloc::string::String,
    /// 上期收盘价模式滚动最高价
    #[prost(string, tag = "11")]
    pub last_close_high: ::prost::alloc::string::String,
    /// 上期收盘价模式滚动最低价
    #[prost(string, tag = "12")]
    pub last_close_low: ::prost::alloc::string::String,
}

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicMiniTickersV3Api {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<PublicMiniTickerV3Api>,
}

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicBookTickerBatchV3Api {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<PublicBookTickerV3Api>,
}

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicIncreaseDepthsBatchV3Api {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<PublicIncreaseDepthsV3Api>,
    #[prost(string, tag = "2")]
    pub event_type: ::prost::alloc::string::String,
}

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicAggreDepthsV3Api {
    #[prost(message, repeated, tag = "1")]
    pub asks: ::prost::alloc::vec::Vec<PublicAggreDepthV3ApiItem>,
    #[prost(message, repeated, tag = "2")]
    pub bids: ::prost::alloc::vec::Vec<PublicAggreDepthV3ApiItem>,
    #[prost(string, tag = "3")]
    pub event_type: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub from_version: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub to_version: ::prost::alloc::string::String,
}

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicAggreDepthV3ApiItem {
    #[prost(string, tag = "1")]
    pub price: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub quantity: ::prost::alloc::string::String,
}

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicAggreDealsV3Api {
    #[prost(message, repeated, tag = "1")]
    pub deals: ::prost::alloc::vec::Vec<PublicAggreDealsV3ApiItem>,
    #[prost(string, tag = "2")]
    pub event_type: ::prost::alloc::string::String,
}

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicAggreDealsV3ApiItem {
    #[prost(string, tag = "1")]
    pub price: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub quantity: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub trade_type: i32,
    #[prost(int64, tag = "4")]
    pub time: i64,
}

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicAggreBookTickerV3Api {
    #[prost(string, tag = "1")]
    pub bid_price: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub bid_quantity: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub ask_price: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub ask_quantity: ::prost::alloc::string::String,
}

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PushDataV3ApiWrapper {
    /// *
    /// 频道
    #[prost(string, tag = "1")]
    pub channel: ::prost::alloc::string::String,
    /// *
    /// 交易对
    #[prost(string, optional, tag = "3")]
    pub symbol: ::core::option::Option<::prost::alloc::string::String>,
    /// *
    /// 交易对ID
    #[prost(string, optional, tag = "4")]
    pub symbol_id: ::core::option::Option<::prost::alloc::string::String>,
    /// *
    /// 消息生成时间
    #[prost(int64, optional, tag = "5")]
    pub create_time: ::core::option::Option<i64>,
    /// *
    /// 消息推送时间
    #[prost(int64, optional, tag = "6")]
    pub send_time: ::core::option::Option<i64>,
    /// *
    /// 数据，NOTE：因为不能重复，所以类型和变量名尽量使用全名
    #[prost(
        oneof = "push_data_v3_api_wrapper::Body",
        tags = "301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315"
    )]
    pub body: ::core::option::Option<push_data_v3_api_wrapper::Body>,
}

/// Nested message and enum types in `PushDataV3ApiWrapper`.
pub mod push_data_v3_api_wrapper {
    /// *
    /// 数据，NOTE：因为不能重复，所以类型和变量名尽量使用全名
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Body {
        #[prost(message, tag = "301")]
        PublicDeals(super::PublicDealsV3Api),
        #[prost(message, tag = "302")]
        PublicIncreaseDepths(super::PublicIncreaseDepthsV3Api),
        #[prost(message, tag = "303")]
        PublicLimitDepths(super::PublicLimitDepthsV3Api),
        #[prost(message, tag = "304")]
        PrivateOrders(super::PrivateOrdersV3Api),
        #[prost(message, tag = "305")]
        PublicBookTicker(super::PublicBookTickerV3Api),
        #[prost(message, tag = "306")]
        PrivateDeals(super::PrivateDealsV3Api),
        #[prost(message, tag = "307")]
        PrivateAccount(super::PrivateAccountV3Api),
        #[prost(message, tag = "308")]
        PublicSpotKline(super::PublicSpotKlineV3Api),
        #[prost(message, tag = "309")]
        PublicMiniTicker(super::PublicMiniTickerV3Api),
        #[prost(message, tag = "310")]
        PublicMiniTickers(super::PublicMiniTickersV3Api),
        #[prost(message, tag = "311")]
        PublicBookTickerBatch(super::PublicBookTickerBatchV3Api),
        #[prost(message, tag = "312")]
        PublicIncreaseDepthsBatch(super::PublicIncreaseDepthsBatchV3Api),
        #[prost(message, tag = "313")]
        PublicAggreDepths(super::PublicAggreDepthsV3Api),
        #[prost(message, tag = "314")]
        PublicAggreDeals(super::PublicAggreDealsV3Api),
        #[prost(message, tag = "315")]
        PublicAggreBookTicker(super::PublicAggreBookTickerV3Api),
    }
}

// ===== 实现技术分析相关的 trait =====

// 为 PublicSpotKlineV3Api 实现 ta-rs trait
impl MarketData for PublicSpotKlineV3Api {
    fn which_exchange(&self) -> Exchange {
        Exchange::Mexc
    }
}

impl Open for PublicSpotKlineV3Api {
    fn open(&self) -> f64 {
        self.opening_price.parse().unwrap_or(0.0)
    }
}

impl High for PublicSpotKlineV3Api {
    fn high(&self) -> f64 {
        self.highest_price.parse().unwrap_or(0.0)
    }
}

impl Low for PublicSpotKlineV3Api {
    fn low(&self) -> f64 {
        self.lowest_price.parse().unwrap_or(0.0)
    }
}

impl Close for PublicSpotKlineV3Api {
    fn close(&self) -> f64 {
        self.closing_price.parse().unwrap_or(0.0)
    }
}

impl Volume for PublicSpotKlineV3Api {
    fn volume(&self) -> f64 {
        self.volume.parse().unwrap_or(0.0)
    }
}

// ===== 实现 BookTickerData trait =====

impl BookTickerData for PublicAggreBookTickerV3Api {
    fn bid_price(&self) -> f64 {
        self.bid_price.parse().unwrap_or(0.0)
    }
    
    fn bid_quantity(&self) -> f64 {
        self.bid_quantity.parse().unwrap_or(0.0)
    }
    
    fn ask_price(&self) -> f64 {
        self.ask_price.parse().unwrap_or(0.0)
    }
    
    fn ask_quantity(&self) -> f64 {
        self.ask_quantity.parse().unwrap_or(0.0)
    }
    
    fn symbol(&self) -> &str {
        // 这里需要从外部传入，暂时返回空字符串
        // 在实际使用时，可以通过包装器或者修改结构体来提供
        ""
    }
    
    fn event_time(&self) -> i64 {
        // 这里需要从外部传入，暂时返回0
        // 在实际使用时，可以通过包装器或者修改结构体来提供
        0
    }
    
    fn exchange(&self) -> Exchange {
        Exchange::Mexc
    }
}

impl BookTickerData for PublicBookTickerV3Api {
    fn bid_price(&self) -> f64 {
        self.bid_price.parse().unwrap_or(0.0)
    }
    
    fn bid_quantity(&self) -> f64 {
        self.bid_quantity.parse().unwrap_or(0.0)
    }
    
    fn ask_price(&self) -> f64 {
        self.ask_price.parse().unwrap_or(0.0)
    }
    
    fn ask_quantity(&self) -> f64 {
        self.ask_quantity.parse().unwrap_or(0.0)
    }
    
    fn symbol(&self) -> &str {
        ""
    }
    
    fn event_time(&self) -> i64 {
        0
    }
    
    fn exchange(&self) -> Exchange {
        Exchange::Mexc
    }
}

// ===== 为 PushDataV3ApiWrapper 实现各种 trait =====

impl BookTickerData for PushDataV3ApiWrapper {
    fn bid_price(&self) -> f64 {
        match &self.body {
            Some(push_data_v3_api_wrapper::Body::PublicAggreBookTicker(ticker)) => {
                ticker.bid_price.parse().unwrap_or(0.0)
            }
            Some(push_data_v3_api_wrapper::Body::PublicBookTicker(ticker)) => {
                ticker.bid_price.parse().unwrap_or(0.0)
            }
            _ => 0.0,
        }
    }
    
    fn bid_quantity(&self) -> f64 {
        match &self.body {
            Some(push_data_v3_api_wrapper::Body::PublicAggreBookTicker(ticker)) => {
                ticker.bid_quantity.parse().unwrap_or(0.0)
            }
            Some(push_data_v3_api_wrapper::Body::PublicBookTicker(ticker)) => {
                ticker.bid_quantity.parse().unwrap_or(0.0)
            }
            _ => 0.0,
        }
    }
    
    fn ask_price(&self) -> f64 {
        match &self.body {
            Some(push_data_v3_api_wrapper::Body::PublicAggreBookTicker(ticker)) => {
                ticker.ask_price.parse().unwrap_or(0.0)
            }
            Some(push_data_v3_api_wrapper::Body::PublicBookTicker(ticker)) => {
                ticker.ask_price.parse().unwrap_or(0.0)
            }
            _ => 0.0,
        }
    }
    
    fn ask_quantity(&self) -> f64 {
        match &self.body {
            Some(push_data_v3_api_wrapper::Body::PublicAggreBookTicker(ticker)) => {
                ticker.ask_quantity.parse().unwrap_or(0.0)
            }
            Some(push_data_v3_api_wrapper::Body::PublicBookTicker(ticker)) => {
                ticker.ask_quantity.parse().unwrap_or(0.0)
            }
            _ => 0.0,
        }
    }
    
    fn symbol(&self) -> &str {
        self.symbol.as_deref().unwrap_or("")
    }
    
    fn event_time(&self) -> i64 {
        self.send_time.unwrap_or(0)
    }
    
    fn exchange(&self) -> Exchange {
        Exchange::Mexc
    }
}

impl TransactionTime for PushDataV3ApiWrapper {
    fn transaction_time(&self) -> i64 {
        // 如果 create_time 不存在，使用 send_time 作为备选
        self.create_time.unwrap_or_else(|| self.send_time.unwrap_or(0))
    }
}

impl PushTime for PushDataV3ApiWrapper {
    fn push_time(&self) -> i64 {
        self.send_time.unwrap_or(0)
    }
}

// ===== 辅助方法 =====

impl PushDataV3ApiWrapper {
    /// 提取 K线数据
    pub fn extract_kline_data(&self) -> Option<&PublicSpotKlineV3Api> {
        match &self.body {
            Some(push_data_v3_api_wrapper::Body::PublicSpotKline(kline)) => Some(kline),
            _ => None,
        }
    }
    
    /// 提取成交数据
    pub fn extract_deals_data(&self) -> Option<&PublicAggreDealsV3Api> {
        match &self.body {
            Some(push_data_v3_api_wrapper::Body::PublicAggreDeals(deals)) => Some(deals),
            _ => None,
        }
    }
    
    /// 提取 Book Ticker 数据
    pub fn extract_book_ticker_data(&self) -> Option<&PublicAggreBookTickerV3Api> {
        match &self.body {
            Some(push_data_v3_api_wrapper::Body::PublicAggreBookTicker(ticker)) => Some(ticker),
            _ => None,
        }
    }
    
    /// 提取深度数据
    pub fn extract_depth_data(&self) -> Option<&PublicAggreDepthsV3Api> {
        match &self.body {
            Some(push_data_v3_api_wrapper::Body::PublicAggreDepths(depths)) => Some(depths),
            _ => None,
        }
    }
    
    /// 提取限制深度数据 (Partial Book Depth Streams)
    pub fn extract_limit_depth_data(&self) -> Option<&PublicLimitDepthsV3Api> {
        match &self.body {
            Some(push_data_v3_api_wrapper::Body::PublicLimitDepths(depths)) => Some(depths),
            _ => None,
        }
    }
    
    /// 提取私有订单数据
    pub fn extract_private_orders_data(&self) -> Option<&PrivateOrdersV3Api> {
        match &self.body {
            Some(push_data_v3_api_wrapper::Body::PrivateOrders(orders)) => Some(orders),
            _ => None,
        }
    }
    
    /// 提取私有成交数据
    pub fn extract_private_deals_data(&self) -> Option<&PrivateDealsV3Api> {
        match &self.body {
            Some(push_data_v3_api_wrapper::Body::PrivateDeals(deals)) => Some(deals),
            _ => None,
        }
    }
    
    /// 提取账户数据
    pub fn extract_account_data(&self) -> Option<&PrivateAccountV3Api> {
        match &self.body {
            Some(push_data_v3_api_wrapper::Body::PrivateAccount(account)) => Some(account),
            _ => None,
        }
    }
    
    /// 获取消息类型
    pub fn get_message_type(&self) -> &str {
        match &self.body {
            Some(push_data_v3_api_wrapper::Body::PublicDeals(_)) => "PublicDeals",
            Some(push_data_v3_api_wrapper::Body::PublicIncreaseDepths(_)) => "PublicIncreaseDepths",
            Some(push_data_v3_api_wrapper::Body::PublicLimitDepths(_)) => "PublicLimitDepths",
            Some(push_data_v3_api_wrapper::Body::PrivateOrders(_)) => "PrivateOrders",
            Some(push_data_v3_api_wrapper::Body::PublicBookTicker(_)) => "PublicBookTicker",
            Some(push_data_v3_api_wrapper::Body::PrivateDeals(_)) => "PrivateDeals",
            Some(push_data_v3_api_wrapper::Body::PrivateAccount(_)) => "PrivateAccount",
            Some(push_data_v3_api_wrapper::Body::PublicSpotKline(_)) => "PublicSpotKline",
            Some(push_data_v3_api_wrapper::Body::PublicMiniTicker(_)) => "PublicMiniTicker",
            Some(push_data_v3_api_wrapper::Body::PublicMiniTickers(_)) => "PublicMiniTickers",
            Some(push_data_v3_api_wrapper::Body::PublicBookTickerBatch(_)) => "PublicBookTickerBatch",
            Some(push_data_v3_api_wrapper::Body::PublicIncreaseDepthsBatch(_)) => "PublicIncreaseDepthsBatch",
            Some(push_data_v3_api_wrapper::Body::PublicAggreDepths(_)) => "PublicAggreDepths",
            Some(push_data_v3_api_wrapper::Body::PublicAggreDeals(_)) => "PublicAggreDeals",
            Some(push_data_v3_api_wrapper::Body::PublicAggreBookTicker(_)) => "PublicAggreBookTicker",
            None => "Unknown",
        }
    }
}
